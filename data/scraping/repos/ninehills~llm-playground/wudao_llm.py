#!/usr/bin/env python
# coding: utf-8

"""Wrapper around Wudao LLM APIs.
"""
import logging
from typing import Any, Dict, List, Optional

from pydantic import Extra, root_validator

from langchain.llms.base import LLM
from langchain.llms.utils import enforce_stop_tokens
from langchain.utils import get_from_dict_or_env

from wudao import api_request

logger = logging.getLogger(__name__)

class Wudao(LLM):
    """Wrapper around Wudao Large language models, eg: ChatGLM-130B

    To use, you should set environment variable: 
        ``WUDAO_API_KEY``: Wudao API key.
        ``WUDAO_PUBLIC_KEY``: Wudao public key.

    Example:
        .. code-block:: python

            from langchain.llms import Wudao
            wenxin = Wudao(model="chatGLM")
    """
    client: Any  #: :meta private:
    model: Optional[str] = "chatGLM"
    """Model name to use."""

    max_message_length: Optional[int] = 2048
    """Maximum length of message to send to Wenxin."""

    wudao_api_key: Optional[str] = None
    """Wudao API key."""

    wudao_public_key: Optional[str] = None
    """Wudao public key."""

    top_p: Optional[float] = 0
    """Top p sampling."""

    temperature: Optional[float] = 1.0
    """Temperature sampling."""

    class Config:
        """Configuration for this pydantic object."""

        extra = Extra.forbid

    @root_validator(allow_reuse=True)
    def validate_environment(cls, values: Dict) -> Dict:
        """Validate that api key and python package exists in environment."""
        wudao_api_key = get_from_dict_or_env(
            values, "wudao_api_key", "WUDAO_API_KEY"
        )
        wudao_public_key = get_from_dict_or_env(
            values, "wudao_public_key", "WUDAO_PUBLIC_KEY", default=""
        )
        values["client"] = WudaoClient(wudao_api_key, wudao_public_key)
        return values

    @property
    def _default_params(self) -> Dict[str, Any]:
        """Get the default parameters for calling Wudao API."""
        return {
            "top_p": self.top_p,
            "temperature": self.temperature,
        }

    @property
    def _identifying_params(self) -> Dict[str, Any]:
        """Get the identifying parameters."""
        return {**{"model": self.model}, **self._default_params}

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "wudao"

    def _call(self, prompt: str, stop: Optional[List[str]] = None) -> str:
        """Call out to Wenxin's generate endpoint.

        Args:
            prompt: The prompt to pass into the model.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                response = wenxin("Tell me a joke.")
        """
        params = self._default_params

        if len(prompt) > self.max_message_length:
            raise ValueError(
                f"Message length {len(prompt)} is longer than max length {self.max_message_length}"
            )

        response = self.client.generate(model=self.model, prompt=prompt, **params)
        return response["outputText"]

class WudaoClient(object):

    def __init__(self, wudao_api_key: str, wudao_public_key: str):
        self.wudao_api_key = wudao_api_key
        self.wudao_public_key = wudao_public_key

    def generate(self, model: str, prompt: str, **params):
        """Call out to Wudao's generate endpoint.

        Args:
            model: The model to use.
            prompt: The prompt to pass into the model.
            **params: Additional parameters to pass to the API.
        
        Returns:
            The string generated by the model.
        """
        token_result = api_request.getToken(self.wudao_api_key, self.wudao_public_key)
        if token_result and token_result["code"] == 200:
            token = token_result["data"]
            data = dict(
                prompt=prompt,
            )
            data.update(params)
            resp = api_request.executeEngine(model, model, token, data)
            if resp and resp["code"] == 200 and resp["data"]["taskStatus"] == "SUCCESS":
                return resp["data"]
            else:
                raise Exception("generate wudao failed: {resp}")
        else:
            raise Exception("get wudao token failed")

if __name__ == "__main__":
    wudao = Wudao()
    print(wudao("你是谁？"))
