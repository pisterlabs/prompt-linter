#! /usr/bin/python
# -*- coding: utf-8 -*-

# Licensed under the MIT license
# http://opensource.org/licenses/mit-license.php

# Copyright 2010, Frank Scholz <fs@beebits.net>

""" Puncher is an UPnP InternetGatewayDevice manipulation tool
    based on the Coherence DLNA/UPnP framework


"""

import os, sys

import string

from twisted.python import usage, text


from puncher import __version__

from coherence.extern.simple_config import Config


"""
 taken with minor adjustments from twisted.python.text.py
"""
def greedyWrap(inString, width=80):
    """Given a string and a column width, return a list of lines.

    Caveat: I'm use a stupid greedy word-wrapping
    algorythm.  I won't put two spaces at the end
    of a sentence.  I don't do full justification.
    And no, I've never even *heard* of hypenation.
    """

    outLines = []

    #eww, evil hacks to allow paragraphs delimited by two \ns :(
    if inString.find('\n\n') >= 0:
        paragraphs = inString.split('\n\n')
        for para in paragraphs:
            outLines.extend(greedyWrap(para, width) + [''])
        return outLines
    inWords = inString.split()

    column = 0
    ptr_line = 0
    while inWords:
        column = column + len(inWords[ptr_line])
        ptr_line = ptr_line + 1

        if (column > width):
            if ptr_line == 1:
                # This single word is too long, it will be the whole line.
                pass
            else:
                # We've gone too far, stop the line one word back.
                ptr_line = ptr_line - 1
            (l, inWords) = (inWords[0:ptr_line], inWords[ptr_line:])
            outLines.append(string.join(l,' '))

            ptr_line = 0
            column = 0
        elif not (len(inWords) > ptr_line):
            # Clean up the last bit.
            outLines.append(' '.join(inWords))
            del inWords[:]
        else:
            # Space
            column = column + 1
    # next word

    return outLines

"""
 taken with minor adjustments from twisted.python.usage.py
"""
def docMakeChunks(optList, width=80):
    """
    Makes doc chunks for option declarations.

    Takes a list of dictionaries, each of which may have one or more
    of the keys 'long', 'short', 'doc', 'default', 'optType'.

    Returns a list of strings.
    The strings may be multiple lines,
    all of them end with a newline.
    """

    # XXX: sanity check to make sure we have a sane combination of keys.

    maxOptLen = 0
    for opt in optList:
        optLen = len(opt.get('long', ''))
        if optLen:
            if opt.get('optType', None) == "parameter":
                # these take up an extra character
                optLen = optLen + 1
            maxOptLen = max(optLen, maxOptLen)

    colWidth1 = maxOptLen + len("  -s, --  ")
    colWidth2 = width - colWidth1
    # XXX - impose some sane minimum limit.
    # Then if we don't have enough room for the option and the doc
    # to share one line, they can take turns on alternating lines.

    colFiller1 = " " * colWidth1

    optChunks = []
    seen = {}
    for opt in optList:
        if opt.get('short', None) in seen or opt.get('long', None) in seen:
            continue
        for x in opt.get('short', None), opt.get('long', None):
            if x is not None:
                seen[x] = 1

        optLines = []
        comma = " "
        if opt.get('short', None):
            short = "-%c" % (opt['short'],)
        else:
            short = ''

        if opt.get('long', None):
            long = opt['long']
            if opt.get("optType", None) == "parameter":
                long = long + '='

            long = "%-*s" % (maxOptLen, long)
            if short:
                comma = ","
        else:
            long = " " * (maxOptLen + len('--'))

        if opt.get('optType', None) == 'command':
            column1 = '    %s      ' % long
        else:
            column1 = "  %2s%c --%s  " % (short, comma, long)

        if opt.get('doc', ''):
            doc = opt['doc'].strip()
        else:
            doc = ''

        if (opt.get("optType", None) == "parameter") \
           and not (opt.get('default', None) is None):
            doc = "%s [default: %s]" % (doc, opt['default'])

        if (opt.get("optType", None) == "parameter") \
           and opt.get('dispatch', None) is not None:
            d = opt['dispatch']
            if isinstance(d, usage.CoerceParameter) and d.doc:
                doc = "%s. %s" % (doc, d.doc)

        if doc:
            column2_l = greedyWrap(doc, colWidth2)
        else:
            column2_l = ['']

        optLines.append("%s%s\n" % (column1, column2_l.pop(0)))

        for line in column2_l:
            optLines.append("%s%s\n" % (colFiller1, line))

        optChunks.append(''.join(optLines))

    return optChunks

usage.docMakeChunks = docMakeChunks

class AddMappingOptions(usage.Options):

    optParameters = [['remote-host',None,'""','remote host address (empty for any)'],
                     ['external-port',None,None,'external port'],
                     ['internal-host','h',None,'internal host address'],
                     ['internal-port','p',None,'internal port'],
                     ['protocol',None,'tcp','tcp or udp'],
                     ['active',None,'y','active, yes or no'],
                     ['lease-duration',None,0,'duration of that mapping'],
                     ['description',None,'','description'],
                    ]

class DeleteMappingOptions(usage.Options):

    optParameters = [['remote-host','h','""','remote host address (empty for any)'],
                     ['external-port','p',None,'external port'],
                     ['protocol',None,'tcp','tcp or udp'],
                    ]

class NoMoreOptions(usage.Options):

    optParameters = []


class Options(usage.Options):

    optFlags = [['version','v', 'print out version'],
                ]
    optParameters = [['uuid','u', None,'uuid of the device to interact with'],
                     ['timeout','t', 10,'time in seconds to wait for a device to show up']
                    ]

    subCommands = [['show-devices',None,NoMoreOptions,
                    """list available InternetGatewayDevices"""],
                   ['show-mappings',None,NoMoreOptions,
                    """list port-mappings on InternetGatewayDevice"""],
                   ['add-mapping',None,AddMappingOptions,
                    """add a port-mapping on InternetGatewayDevice"""],
                   ['delete-mapping',None,DeleteMappingOptions,
                    """remove a port-mapping from InternetGatewayDevice"""],
                   ['info',None,NoMoreOptions,
                    """print details about InternetGatewayDevice"""],
                  ]

    def __init__(self):
        usage.Options.__init__(self)
        self['options'] = {}

    def opt_version(self):
        print "Puncher version:", __version__
        sys.exit(0)

    def opt_help(self):
        sys.argv.remove('--help')

        print self.__str__()
        sys.exit(0)

def main(options):

    from puncher.base import Puncher
    try:
        p = Puncher(options.subCommand,options)
    except Exception,msg:
        print msg
        import traceback
        traceback.print_exc()
        reactor.stop()


if __name__ == '__main__':

    options = Options()
    try:
        options.parseOptions()
    except usage.UsageError, errortext:
        print '%s: %s' % (sys.argv[0], errortext)
        print '%s: Try --help for usage details.' % (sys.argv[0])
        sys.exit(0)


    from twisted.internet import reactor

    reactor.callWhenRunning(main, options)
    reactor.run()
