#! /usr/bin/python
# -*- coding: utf-8 -*-

# Licensed under the MIT license
# http://opensource.org/licenses/mit-license.php

# Copyright 2009, Frank Scholz <fs@beebits.net>
# Copyright 2011, Hartmut Goebel <h.goebel@goebel-consult.de>

""" Cadre is a PictureFrame application based on
    the Coherence DLNA/UPnP framework

"""

import os

from cadre import __version__

from coherence.extern.simple_config import Config

"""
 thankfully taken from twisted.scripts._twistd_unix.py
"""
def daemonize():
    # See http://www.erlenstar.demon.co.uk/unix/faq_toc.html#TOC16
    if os.fork():   # launch child and...
        os._exit(0) # kill off parent
    os.setsid()
    if os.fork():   # launch child and...
        os._exit(0) # kill off parent again.
    os.umask(077)
    null = os.open('/dev/null', os.O_RDWR)
    for i in range(3):
        try:
            os.dup2(null, i)
        except OSError, e:
            if e.errno != errno.EBADF:
                raise
    os.close(null)


def setConfigFile():
    try:
        configDir = os.path.expanduser('~')
    except:
        configDir = os.getcwd()
    return os.path.join( configDir, '.cadre')

def __opt_option(option, opt, value, parser):
    try:
        key, val = value.split(':', 1)
    except:
        key = value
        val = ''
    parser.values.options[key] = val


def main(config):

    from cadre.base import Cadre
    c = Cadre(config)


if __name__ == '__main__':
    import optparse
    parser = optparse.OptionParser('%prog [options]',
                                   version="Cadre version: %s" % __version__)
    parser.add_option('-d', '--daemon', action='store_true',
                      help='daemonize')
    parser.add_option('--noconfig', action='store_false', dest='configfile',
                      help='ignore any configfile found')
    parser.add_option('-c', '--configfile', default=setConfigFile(),
                      help='configfile to use, default: %default')
    parser.add_option('-l', '--logfile', help='logfile to use')
    parser.add_option('-o', '--option', action='callback',
                      dest='options', metavar='NAME:VALUE',
                      default={}, callback=__opt_option, type='string',
                      help="activate option (name and value separated by a "
                           "colon (`:`), may be given multiple times)")

    options, args = parser.parse_args()
    if args:
        parser.error('takes no arguments')

    if options.daemon:
        daemonize()

    config = {}
    config['logging'] = {}

    if options.configfile:
        try:
            config = Config(options.configfile, root='config').config
        except IOError:
            print "Config file %r not found, ignoring" % options.configfile

    # copy options passed by -o/--option into config
    config.update(dict(options.options))

    if options.logfile:
        config['logging'] = {}
        config['logging']['logfile'] = options.logfile
    elif options.daemon:
        config.get('logging').get('level','none')

    grafics = config.get('grafics')
    if grafics is None:
        # backend not specified (or not config file), try to guess
        try:
            import pyglet
            grafics = 'pyglet'
        except:
            try:
                import clutter
                grafics = 'clutter'
            except:
                raise SystemExit('Sorry, not supported rendering backend found.')
        config['grafics'] = grafics

    if grafics == 'pyglet':
        from cadre.extern import pygletreactor
        pygletreactor.install()
    else:
        try:
            from twisted.internet import glib2reactor
            glib2reactor.install()
        except AssertionError:
            print "error installing glib2reactor"

    from twisted.internet import reactor

    reactor.callWhenRunning(main, config)
    reactor.run()
