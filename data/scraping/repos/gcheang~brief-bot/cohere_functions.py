"""
Module for cohere functions, helper module for app.py

Imported By
-----------
app.py              : main module for the BriefBot discord app

Imports
-------
os                  : operating system calls
dotenv              : environment variables
cohere              : text analysis

Functions:
----------
generate            : Returns a message summary generated by cohere
generate_short      : Returns a message summary generated by cohere
generate_long       : Returns a message summary generated by cohere
identify_emotion    : Returns an emotion generated by cohere
identify_emotion_v2 : Returns an emotion generated by cohere
"""

# imports
import os
from dotenv import load_dotenv
import cohere

load_dotenv()
API_KEY = os.getenv('API_KEY')

# setting up cohere client
co = cohere.Client(API_KEY)

# cohere functions
def generate(message):
    """
    Returns a message summary generated by cohere

    Parameters
    ----------
    message : str
        block of messages to be parsed by cohere

    Returns
    -------
    str
        a summary of message generated by cohere or an error message
        that is thrown if message is too short
    """
    print("message:", message)
    if len(message) < 250:
        return "Must be longer than 250 characters!"
    return generate_long(message)

def generate_short(message):
    """
    Returns a message summary generated by cohere

    Parameters
    ----------
    message : str
        block of messages to be parsed by cohere

    Returns
    -------
    str
        a summary of message generated by cohere
    """
    response = co.summarize(
        text=message,
        length='auto',
        format='auto',
        model='summarize-medium',
        additional_command='',
        temperature=0.5,
    )
    print("response:", response.summary)
    return response.summary

def generate_long(message):
    """
    Returns a message summary generated by cohere

    Parameters
    ----------
    message : str
        block of messages to be parsed by cohere

    Returns
    -------
    str
        a summary of message generated by cohere
    """
    print("message:", message)
    response = co.summarize(
        text=message,
        length='auto',
        format='auto',
        model='summarize-xlarge',
        additional_command='',
        temperature=0.5,
    )
    print("response:", response.summary)
    return response.summary

def identify_emotion(message):
    """
    Returns an emotion generated by cohere

    Parameters
    ----------
    message : str
        block of messages to be parsed by cohere

    Returns
    -------
    str
        an emotion generated from cohere parsing message
    """
    if message is None:
        return "Format: !emotion <message>"
    response = co.classify(
        model='96ad5ed9-d43a-49e7-b0da-79d5b2c9555d-ft',
        inputs=[message]
    )
    return response.classifications[0].prediction.capitalize() + "!"

def identify_emotion_v2(message):
    """
    Returns an emotion generated by cohere

    Parameters
    ----------
    message : str
        block of messages to be parsed by cohere

    Returns
    -------
    str
        an emotion generated from cohere parsing message
    """
    if message is None:
        return "Format: !emotion <message>"
    response = co.classify(
        model='5092799e-cf8d-4129-b81f-04417e54d3b2-ft',
        inputs=[message]
    )
    emotions_dict = {0:'Sadness!', 1:'Joy!', 2:'Love!', 3:'Anger!', 4:'Fear!'}
    return emotions_dict.get(int(response.classifications[0].prediction))
