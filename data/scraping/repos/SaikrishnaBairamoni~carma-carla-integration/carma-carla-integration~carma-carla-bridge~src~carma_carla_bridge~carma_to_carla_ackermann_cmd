#!/usr/bin/env python
# Copyright (C) 2021 LEIDOS.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#
#
# This file is loosely based on the reference architecture developed by Intel Corporation for Leidos located here
# https://github.com/41623134/carla-autoware/blob/master/catkin_ws/src/carla_autoware_bridge/src/carla_autoware_bridge/vehiclecmd_to_ackermanndrive
#
# That file has the following license and some code snippets from it may be present in this file as well and are under the same license.
#
# Copyright (c) 2019 Intel Corporation
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#

"""
Subscribe from CARMA :autoware_msgs::VehicleCmd
    Topic: /hardware_interface/vehicle_cmd

Subscribe from CARMA :std_msgs::Float32
    Topic: /guidance/twist_filter/result/twist/lateral_jerk

Subscribe from CARMA :cav_msgs::GuidanceState
    Topic: /guidance/state

Publish to CARLA :ackermann_msgs::AckermannDrive
    Topic: /carla/{}/ackermann_cmd

"""
import rospy
from ackermann_msgs.msg import AckermannDrive
from autoware_msgs.msg import VehicleCmd
from cav_msgs.msg import GuidanceState
from std_msgs.msg import Float32

ackermann_cmd_pub = None
guidance_state = GuidanceState.STARTUP
init_status = True
init_cmd = AckermannDrive()
lateral_jerk = 0

def guidance_state_callback(guidance_state_msg):
    """
    callback for guidance state subscribing from CARMA
    guidance_state_msg type:
        cav_msgs::GuidanceState
    """
    global init_status, guidance_state, init_cmd, ackermann_cmd_pub

    guidance_state = guidance_state_msg.state
    if guidance_state == GuidanceState.ENGAGED and init_status:
        init_status = False
        ## providing initial ackermann command to carla virtual vehicle
        init_cmd.speed = rospy.get_param('~init_speed', 10)
        init_cmd.acceleration = rospy.get_param('~init_acceleration', 1)
        init_cmd.steering_angle = rospy.get_param('~init_steering_angle', 0)
        init_cmd.jerk = rospy.get_param('~init_jerk', 0)
        ackermann_cmd_pub.publish(init_cmd)

def commanded_jerk_callback(lateral_jerk_msg):
    """
    callback for commanded jerk from CARMA
    lateral_jerk_msg type:
        std_msgs::Float32
    """

    global lateral_jerk
    lateral_jerk = lateral_jerk_msg.data

def vehicle_cmd_callback(vehicle_cmd):
    """
    callback for vehicle cmds subscribing from CARMA
    vehicle_cmd type:
        autoware_msgs::VehicleCmd
    """
    global ackermann_cmd_pub
    if guidance_state != GuidanceState.ENGAGED:
        return
    else:
        ackermann_drive = AckermannDrive()
        ackermann_drive.speed = vehicle_cmd.ctrl_cmd.linear_velocity
        ackermann_drive.acceleration = vehicle_cmd.ctrl_cmd.linear_acceleration
        ackermann_drive.steering_angle = vehicle_cmd.ctrl_cmd.steering_angle
        ackermann_drive.jerk = lateral_jerk

        ## publishing ackermann drive msg to CARLA virtual vehicle
        ackermann_cmd_pub.publish(ackermann_drive)


def vehicle_cmd_to_ackermanndrive():
    """
    mainloop
    """
    global ackermann_cmd_pub
    rospy.init_node('carma_to_carla_vehicle_cmd')
    role_name = rospy.get_param('~role_name', 'ego_vehicle')
    # pub init
    ackermann_cmd_pub = rospy.Publisher('/carla/{}/ackermann_cmd'.format(role_name), AckermannDrive, queue_size=1)
    # sub init
    rospy.Subscriber('/hardware_interface/vehicle_cmd', VehicleCmd, vehicle_cmd_callback, queue_size=1)
    rospy.Subscriber('/guidance/state', GuidanceState, guidance_state_callback, queue_size=1)
    rospy.Subscriber('/guidance/twist_filter/result/twist/lateral_jerk', Float32, commanded_jerk_callback, queue_size=1)
    rospy.spin()


if __name__ == '__main__':
    print("carma_to_carla_vehicle_cmd")
    vehicle_cmd_to_ackermanndrive()
