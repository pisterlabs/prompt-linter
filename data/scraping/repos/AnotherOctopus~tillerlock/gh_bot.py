
from github import Github, GithubIntegration
from static_vals import REPO_NAME, OWNER, APP_ID, BOT_PRIV_KEY
import logging
from time import sleep
import openai

def notify_pr_commenter_of_proposal(pr_number: int, comment_id: int, pull_request_url):
    response = """
    Thank you for your comment!
    your comment has been passed to the Tiller AI, which has generated a fix for your comment.
    check it out [here](pull_request_url)!
      """
    prompt = f"""
    Create a response to a comment on a Pull Request which was made by another human engineer, which includes this link to this Pull Request which fixes it: {pull_request_url}. 
    This response must contain this link embedded in the text, linked liked in the .md format, i.e. [here](<link>).
    This response should also thank them for their comment, and referance the fact that this proposal was generated by an AI.
    Respond in pirate speak.
    Keep it in one sentence.
    """
    retry_count = 5
    while retry_count > 0:
        print(f"Attempting try number {6 - retry_count}")
        try:
            chat_completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
            )

            response = chat_completion.choices[0].message.content
            break
        except Exception as e:
            print(f"Creaeting chat completion failed with error {e}, retrying...")
            retry_count -= 1
            sleep(4)
    respond_to_pr_comment(pr_number, comment_id, response)  

def respond_to_pr_comment(pr_number: int, comment_id: int, body: str):
    owner = OWNER 
    repo_name = REPO_NAME 
    # Create an GitHub integration instance
    git_integration = GithubIntegration(
        APP_ID,
        BOT_PRIV_KEY,
    )

    # Get a git connection as our bot
    # Here is where we are getting the permission to talk as our bot and not
    # as a Python webservice
    git_connection = Github(
        login_or_token=git_integration.get_access_token(
            git_integration.get_repo_installation(owner, repo_name).id
        ).token
    )
    repo = git_connection.get_repo(f"{owner}/{repo_name}")
    comment = repo.get_pull(pr_number).create_review_comment_reply(comment_id,body)
    logging.info(f"Created comment {comment.id} on PR {pr_number}")
