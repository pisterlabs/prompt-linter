import os
import openai
import json

# Create a json file called api.secret with your API key stored as OPENAI_KEY, e.g.
# {"OPENAI_KEY":"XXXXX"}

fh = open("api.secret","r")
secrets = json.load(fh)
openaikey = secrets["OPENAI_KEY"]
openai.api_key = openaikey

nested = {}

question = "What can I do about red wine spilled on the carpet?"

def createQuestionPrompt(question):
  """
  This function provides a list of questions to be answered regarding the initial plan.
  """
  prompt = "The following answers were selected as the best ones generated by a group of wise, empathic, patient, cautious and humane respondents.\n\n" + \
           "Generate five possible solutions to the given problem, '" + question + "'"

  return prompt

def selectLeastBadSideEffects(text):
  text += "Print which one of the five solutions would be least likely to lead to negative side effects."
  return text

def solicitSideEffects(text):
  text += "List three possible negative side effects that might occur as a consequence of taking that action."
  return text

def getText(prompt):
  """
  This function returns the text response to the prompt.
  """
  response = openai.Completion.create(
    engine="text-babbage-001", #"text-davinci-002",
    prompt=prompt,
    temperature=0.2,
    max_tokens=100, #256,
    top_p=1,
    frequency_penalty=0.2,
    presence_penalty=0
  )
  return response.choices[0].text

def splitOptions(text):
  """
  This function splits the text response into a list of options by "1.", "2.", etc.
  """
  options = []
  #print(text)
  option1,remainder = text.split("2.")
  option1 = option1.split("1.")[1]
  options.append(option1)
  for kk in range(3,10):
    if(str(kk) in text):
      optionk,remainder = remainder.split(str(kk)+".")
      options.append(optionk)
    else:
      break
    #option3,remainder = remainder.split("4.")
    #option4,option5 = remainder.split("5.")
  #options = [option1,option2,option3,option4,option5]
  return options

p = createQuestionPrompt(question)
t = getText(p)
ttot = p + t + "\n\n"

decisionOptions = splitOptions(t)


ttot = selectLeastBadSideEffects(ttot)
leastBadOption = getText(ttot)
ttot += leastBadOption + "\n\n"

ttot = solicitSideEffects(ttot)
sideEffects = getText(ttot)
ttot += sideEffects + "\n\n"

sideEffectsList = splitOptions(sideEffects)
for n,s in enumerate(sideEffectsList):
  q = "What are the odds, expressed in percent odds, of side effect #"+str(n+1)+" ("+s.strip()+") happening, " + \
      "conditional on solution '"+leastBadOption.strip()+"' being pursued?"
  ttot_a = ttot + q
  t = getText(ttot_a)
  ttot_a += t + "\n\n"
  #print(ttot_a,t)

  q2 = "From the previous line, extract the percent odds and print it below."
  ttot_b = ttot_a + q2
  t = getText(ttot_b)
  ttot_b += t + "\n\n"
  print("Cycle ",n,ttot_b,t)

#print("CCCCC",ttot)
