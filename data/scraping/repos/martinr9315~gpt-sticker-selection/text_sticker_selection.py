import openai
import csv
import os

# Initialize API client
openai.api_key = os.environ['OPENAI_API_KEY']


def parse_stickers(f):
    # Read stickers from a CSV file
    stickers = []
    with open(f, mode='r') as file:
        csv_file = csv.reader(file)
        next(csv_file, None)
        for line in csv_file:
            stickers.append(line[0])
    return stickers


"""
Function Description:
    The `caption_stickering` function interacts with the OpenAI GPT-3 API to
    generate a theme and select appropriate text stickers based on a set of
    image captions. It constructs a conversation for GPT-3, makes an API call
    to GPT-3, and returns the generated response.

Inputs:
        stickers (list of str): A list of available text stickers.
        spread_captions (list of list of str): A list where each sub-list contains captions describing a set of images in a spread.
        model (str, optional, default="gpt-3.5-turbo-16k"): The GPT-3 model to be used for generating the response.
        report_cost (bool, optional, default=False): flag indicating whether to report the token usage and cost of the API call.

Outputs:
    - model_response (str):
        - The response generated by GPT-3 in the format \nTheme: sentence\nJSON: json_text".
"""
def caption_stickering(stickers, spread_captions, model="gpt-3.5-turbo-16k", report_cost=False):
    # Describe task in prompt
    prompt = "Task: You are a designer who must select 3 text stickers to add them to a page of a scrapbook given a set of captions describing the images in the spread. In one full sentence, identify the theme of this page. Use that explanation to return a JSON of the 3 most appropriate text stickers from the sticker list below, with the keys as '1', '2', '3'."

    # Specify format of response in prompt
    prompt += "The format of each response should be:\nTheme: sentence\nJSON: json_text"

    conversation = [{"role": "system", "content": f"{prompt}"}]

    # Load text stickers
    conversation.append({"role": "user", "content": f'\nSticker list: {stickers[:1100]}'})

    # Format captions
    result = [', '.join(spread) for spread in spread_captions]
    captions = '\n\n'.join(result)

    # Include image captions
    conversation.append({"role": "user", "content": f"You are given the following {len(spread_captions)} sets of captions. Return one response for each set:\n {captions}."})

    # Make the API call
    response = openai.ChatCompletion.create(
      model=model,
      messages=conversation,
      temperature=0.2
    )

    # Calculate number of tokens & cost - this assumes gpt-3.5-turbo-16k
    if report_cost:
        print(f'{response["usage"]["total_tokens"]} total tokens used.')
        print(f"cost: {(response['usage']['total_tokens']/1000)*.003}")

    model_response = response['choices'][0]['message']['content']
    return model_response


def main():
    stickers = parse_stickers("representative_slugs.csv")

    misc_captions = [["a woman is holding a baby on a bed",
                      "a woman holding a baby in her arms",
                      "a basket filled with baby blankets",
                      "a toy airplane sitting on top of a table",
                      "a baby boy laying on a pillow on a bed"],
                     ["a rainbow painted street in the city",
                      "a woman walking down a rainbow painted street",
                      "two people standing on a rainbow painted street",
                      "a woman standing in front of a bar",
                      "a red building with a green and red sign"],
                     ["a couple of kids sitting next to luggage",
                      "a red machine with a sign",
                      "a boy and girl sitting in a train",
                      "a boy standing next to a train"]]

    print(caption_stickering(stickers, misc_captions, report_cost=True))


if __name__ == "__main__":
    main()
