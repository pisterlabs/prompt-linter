import openai
import instructor
from pydantic import BaseModel
from datetime import datetime

# This enables response_model keyword
# from openai.ChatCompletion.create
instructor.patch()
now = datetime.utcnow()

class MeetData(BaseModel):
    meet: bool
    startTime: str
    endTime: str

def extract_meeting_info(email_content):
    messages = [{"role": "system", "content": '''I will give you content of an email generated by my bot, and you need to decide 
                    whether a meeting is confirmed using current information or not. Extract this value as boolean True or False.
<<<<<<< HEAD
                    If it is possible, return True and startTime and endTime in the format "yyyy-mm-ddThh:mm:ss".
                    If not possible, return False and startTime and endTime as empty strings.
                    Confirm the meeting if you think there is a common time to schedule.
=======
                    If it is possible, return True and startTime and endTime in the format "yyyy-mm-ddThh:mm:ss". 
                    If not possible, return False and startTime and endTime as empty strings.
                    Do it if and only if the meeting is confirmed. If there is any uncertainty, return False and empty strings.
>>>>>>> 6588927f01f30ab668f02df8480384efcd6551ec
                    Just for your referene, right now its {}'''.format(str(now))}]

    messages.append({"role": "user", "content": email_content})

    meet = openai.ChatCompletion.create(
<<<<<<< HEAD
        # model="gpt-3.5-turbo",
        model="gpt-4",
=======
        model="gpt-3.5-turbo",
>>>>>>> 6588927f01f30ab668f02df8480384efcd6551ec
        response_model=MeetData,
        messages=messages
    )

    return meet