from aiogram import Bot, Dispatcher, executor, types
from config import ConfigManager
import logging
from bot.openai_api import OpenAIManager
from aiogram.utils.exceptions import TelegramAPIError, CantParseEntities

class MyChatBot:
    def __init__(self, telegram_bot_token, openai_api_key):
        # Set up logging
        logging.basicConfig(level=logging.INFO)

        # Create bot and dispatcher instances

        self.bot = Bot(token=telegram_bot_token)
        self.dp = Dispatcher(self.bot)

        # Create OpenAI manager instance
        self.openai_manager = OpenAIManager(openai_api_key)

        # Define message history as an instance variable
        self.message_history = [{"role": "system", "content": "–í—ã - –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –í—ã –≥–ª—É–±–æ–∫–æ –æ–±—ä—è—Å–Ω—è–µ—Ç–µ –ø–æ–Ω—è—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ª—é–¥—è–º —É—á–∏—Ç—å—Å—è. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤—ã –∑–∞–¥–∞–µ—Ç–µ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ."}]

        # Register message handlers
        self.dp.register_message_handler(self.send_welcome, commands=['start'])
        self.dp.register_message_handler(self.send_help, commands=['help'])
        self.dp.register_message_handler(self.new_conversation, commands=['new'])
        self.dp.register_message_handler(self.echo)


    async def setup_bot_commands(self, dispatcher: Dispatcher):
        commands = [
            types.BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            types.BotCommand(command="/help", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
            types.BotCommand(command="/new", description="–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä"),
        ]
        await dispatcher.bot.set_my_commands(commands)

    async def send_welcome(self, message: types.Message):
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è. –Ø –∏—Å–ø–æ–ª—å–∑—É—é GPT-3 –æ—Ç OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.")
    
    async def new_conversation(self, message: types.Message):
        self.message_history = [{"role": "system", "content": "–í—ã - –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –í—ã –≥–ª—É–±–æ–∫–æ –æ–±—ä—è—Å–Ω—è–µ—Ç–µ –ø–æ–Ω—è—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ª—é–¥—è–º —É—á–∏—Ç—å—Å—è. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤—ã –∑–∞–¥–∞–µ—Ç–µ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ."}]
        await message.reply("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.")

    async def send_help(self, message: types.Message):
        """Send a message when the command /help is issued."""
        text = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è. –Ø –∏—Å–ø–æ–ª—å–∑—É—é GPT-3 –æ—Ç OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. "
            "–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è —Å–¥–µ–ª–∞—Ç—å:\n\n"
            "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –¥–µ–Ω—å\n"
            "üçù –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç\n"
            "üí∏ –†–∞–∑–¥–µ–ª–∏—Ç—å –±—é–¥–∂–µ—Ç\n"
            "üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∏—Ö–∏ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—é\n"
            "üé∂ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–µ—Å–µ–Ω\n"
            "üé® –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤\n"
            "üìö –ù–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥\n"
            "üó∫Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\n"
            "üé¨ –ü—Ä–∏–¥—É–º–∞—Ç—å –∏–¥–µ—é –¥–ª—è —Ñ–∏–ª—å–º–∞\n"
            "üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∏–¥–µ–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞. "
        )
        await message.reply(text)

    async def echo(self, message: types.Message):
        try:
            user_input = message.text
            if len(user_input) > 2048:
                await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.")
                raise ValueError("Message is too long.")
            self.message_history.append({"role": "user", "content": user_input})

            num_tokens = sum(len(msg["content"].split()) for msg in self.message_history)
            if num_tokens > 3500:
                self.message_history = self.clean_messages()
                await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.")
                raise ValueError("Message is too long.")
            await self.bot.send_chat_action(message.chat.id, 'typing')

            # Get OpenAI response
            openai_response = await self.openai_manager.get_openai_response(self.message_history)
            self.message_history.append({"role": "assistant", "content": openai_response})

            # Send message with different parse modes until one works
            parse_modes = ['MarkdownV2', 'Markdown', 'HTML']
            for parse_mode in parse_modes:
                try:
                    await message.answer(openai_response, parse_mode=parse_mode)
                    break
                except CantParseEntities:
                    if parse_mode == parse_modes[-1]:
                        raise

        except (TelegramAPIError, ValueError) as e:
            logging.error(f"Error processing message: {str(e)}")
            error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º."
            self.message_history = self.clean_messages()
            await message.answer(error_message)

        except Exception as e:
            logging.error(f"Unexpected error: {str(e)}")
            self.message_history = self.clean_messages()

    def clean_messages(self):
        first_message = "–í—ã - –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –í—ã –≥–ª—É–±–æ–∫–æ –æ–±—ä—è—Å–Ω—è–µ—Ç–µ –ø–æ–Ω—è—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ª—é–¥—è–º —É—á–∏—Ç—å—Å—è. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤—ã –∑–∞–¥–∞–µ—Ç–µ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ."
        message_history = [{"role": "system", "content": first_message}]
        return message_history

    def start(self):
        executor.start_polling(self.dp, skip_updates=True, on_startup=self.setup_bot_commands)
