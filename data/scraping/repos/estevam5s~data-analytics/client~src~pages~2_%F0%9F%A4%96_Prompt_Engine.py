import streamlit as st
import os
import openai
from PIL import Image

import re

GPT_SYSTEM_INSTRUCTIONS = """Write Manim scripts for animations in Python. Generate code, not text. Never explain code. Never add functions. Never add comments. Never infinte loops. Never use other library than Manim/math. Only complete the code block. Use variables with length of maximum 2 characters. At the end use 'self.play'.

```
from manim import *
from math import *

class GenScene(Scene):
    def construct(self):
        # Write here
```"""

def wrap_prompt(prompt: str) -> str:
  """
    Wraps the prompt in the GPT-3.5 instructions
  """
  return f"Animation Request: {prompt}"

def extract_code(text: str) -> str:
  """
    Extracts the code from the text generated by GPT-3.5 from the ``` ``` blocks
  """
  pattern = re.compile(r"```(.*?)```", re.DOTALL)
  match = pattern.search(text)
  if match:
    return match.group(1).strip()
  else:
    return text

def extract_construct_code(code_str: str) -> str:
  """
    Extracts the code from the construct method
  """
  pattern = r"def construct\(self\):([\s\S]*)"
  match = re.search(pattern, code_str)
  if match:
    return match.group(1)
  else:
    return ""

def code_static_corrector(code_response: str) -> str:
  """
    Corrects some static errors in the code
    GPT only has information until 2021, so it ocasionally generates code
    that is not compatible with the latest version of Manim
  """
  # Replace ShowCreation with Create
  # Solution: https://www.reddit.com/r/manim/comments/qcosuj/nameerror_name_showcreation_is_not_defined/
  code_response = code_response.replace("ShowCreation", "Create")

  return code_response

def create_file_content(code_response: str) -> str:
  """
    Creates the content of the file to be written
  """
  return f"""# Manim code generated with OpenAI GPT
# Command to generate animation: manim GenScene.py GenScene --format=mp4 --media_dir . --custom_folders video_dir

from manim import *
from math import *

class GenScene(Scene):
    def construct(self):
{code_static_corrector(code_response)}"""


icon = Image.open(os.path.dirname(__file__) + '/../icon.png')

st.set_page_config(page_icon=icon)

st.markdown('# ü§ñ Prompt Engine')

st.write("A engenharia de prompt consiste em fornecer instru√ß√µes corretas ao GPT-4. Quanto mais precisas as instru√ß√µes, melhores os resultados. O objetivo √© gerar c√≥digo Manim a partir de uma parte espec√≠fica do c√≥digo. Ent√£o voc√™ pode usar o c√≥digo para renderizar a anima√ß√£o.")

prompt = st.text_area("Escreva sua ideia de anima√ß√£o aqui. Use palavras simples.",
                      "Desenhe um c√≠rculo azul e converta-o em um quadrado vermelho")

openai_api_key = st.text_input(
    "Cole o seu [Open API Key](https://platform.openai.com/account/api-keys)", value="", type="password")

openai_model = st.selectbox(
    "Selecione o modelo GPT. Se voc√™ n√£o tiver acesso ao GPT-4, selecione GPT-3.5-Turbo", ["GPT-3.5-Turbo", "GPT-4"])

generate_prompt = st.button(
    ":computer: Gerar prompt :sparkles:", type="primary")

if generate_prompt:
  if not openai_api_key:
    st.error("Error: Voc√™ precisa fornecer sua pr√≥pria chave de API aberta para usar esse recurso.")
    st.stop()
  if not prompt:
    st.error("Error: Voc√™ precisa fornecer um prompt.")
    st.stop()

  response = openai.ChatCompletion.create(
      model=openai_model.lower(),
      messages=[
          {"role": "system", "content": GPT_SYSTEM_INSTRUCTIONS},
          {"role": "user", "content": wrap_prompt(prompt)}
      ]
  )

  code_response = extract_code(response.choices[0].message.content)

  code_response = extract_construct_code(code_response)

  st.text_area(label="C√≥digo gerado: ",
               value=code_response,
               key="code_input")
