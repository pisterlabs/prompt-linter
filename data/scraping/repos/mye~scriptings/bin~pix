#!/usr/bin/env python
"""
pip install openai pillow
pip install black
pix: read prompts from stdin, write images to ~/pix (default)

`pix` is a python script that reads prompts (one line per prompt) from standard input and calls an image generation API (DALL-E 2 by OpenAI is the default). It writes the generated images (default is PNG format) into an output folder ($HOME/pix by default) with a unique filename and embeds metadata (creation date, prompt used, ...) into the image file. It prints the full path of each generated image as a line on standard output. If there is a commandline argument it specifies an alternative output folder.
"""

import openai
import argparse
import datetime
import os
import sys
import uuid
import pprint

import base64
from io import BytesIO
from PIL import Image
from PIL.PngImagePlugin import PngInfo

def generate_images(prompt):
    """Generate an image using the OpenAI DALL-E API."""
    response = openai.Image.create(
        prompt=prompt,
        size="512x512",
        response_format="b64_json"
    )

    return list(e["b64_json"] for e in response['data'])


def convert_b64_json_to_image(b64):
    image_bytes = base64.b64decode(b64)
    return Image.open(BytesIO(image_bytes))

def save_image(image, output_dir, meta={}):
    """Save an image to a file with a unique filename."""
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"{timestamp}_{str(uuid.uuid4())[:8]}.png"
    output_path = os.path.join(output_dir, filename)
    pnginfo = PngInfo()
    for k,v in meta.items():
    	pnginfo.add_text(str(k), str(v))

    image.save(output_path, format="PNG", pnginfo=pnginfo)
    return output_path


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--output-dir",
        default=os.path.join(os.path.expanduser("~"), "pix"),
        help="Output directory for the generated images.",
    )
    args = parser.parse_args()

    if not os.path.exists(args.output_dir):
        os.makedirs(args.output_dir)

    for line in sys.stdin:
        prompt = line.strip()
        #pprint.pprint(image_bytes)
        for img in map(convert_b64_json_to_image, generate_images(prompt)):
            print(save_image(img, args.output_dir, meta={'prompt': prompt}))
        #output_path =
        #metadata = f"Prompt: {prompt}\nCreated: {datetime.datetime.now()}"
        #os.system(f"exiftool -Comment='{metadata}' {output_path}")
        #print(output_path)


