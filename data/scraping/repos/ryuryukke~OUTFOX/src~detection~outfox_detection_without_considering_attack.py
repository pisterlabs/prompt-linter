import random
random.seed(42)
import openai
from tqdm import tqdm
import time
import os
import argparse
from utils.utils import load_pkl, process_reply_from_chatgpt, make_mixed_data, completions_with_backoff, make_prompt_for_detection, compute_metrics

openai.api_key = os.getenv("OPENAI_API_KEY")


def detection_by_chatgpt(test_data, mixed_test_pss, test_ps_to_near_ps_human_lm_pairs_from_train, preds_path):
    preds = []
    for text, ps in tqdm(zip(test_data, mixed_test_pss), total=len(test_data), desc='Processing Detection...'):
        prompt = make_prompt_for_detection(text, test_ps_to_near_ps_human_lm_pairs_from_train[ps][:5])
        while 1:
            try:
                res = completions_with_backoff(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}], temperature=0, top_p=0)
                pred = process_reply_from_chatgpt(res)
                preds.append(pred)
                with open(preds_path, 'a') as f_pred:
                    f_pred.write(f"{pred}\n")
                break
            except:
                time.sleep(1)
                continue
    return preds


def main():
    parser = argparse.ArgumentParser(description='outfox_detection_without_considering_attacks')
    parser.add_argument('--model_name', help='Specify target llms to be detected.', required=True, choices=['chatgpt', 'flan_t5_xxl', 'text_davinci_003'])
    args = parser.parse_args()

    model_name = args.model_name

    preds_path = '../../results/outfox_detection/without_considering_attack_{model_name}.log'

    test_data, test_labels, mixed_test_pss = make_mixed_data(f'../../data/common/test/test_humans.pkl', f'../../data/{model_name}/test/test_lms.pkl', f'../../data/common/test/test_problem_statements.pkl')
    
    print(f"Start outfox detection, without condiering attacks, for essays generated by {model_name}...")
    # Loading top-k (problem statement, human-written essay, LLM-generated essay) sets retrieved in advance based on the problem statement, using tf-idf.
    # Whatever LMs (FLAN, GPT-3.5) to be detected, our OUTFOX detector consider the essays by ChatGPT.
    test_ps_to_near_ps_human_lm_pairs_from_train = load_pkl('../../data/chatgpt/util/test_ps_to_near_ps_human_lm_pairs_from_train.pkl')
    preds = detection_by_chatgpt(test_data, mixed_test_pss, test_ps_to_near_ps_human_lm_pairs_from_train, preds_path)

    human_rec, machine_rec, avg_rec, acc, precision, recall, f1 = compute_metrics(test_labels, preds)
    print(f"HumanRec: {human_rec}, MachineRec: {machine_rec}, AvgRec: {avg_rec}, Acc:{acc}, Precision:{precision}, Recall:{recall}, F1:{f1}")


if __name__ == '__main__':
    main()