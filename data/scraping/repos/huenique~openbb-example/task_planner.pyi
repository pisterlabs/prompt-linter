"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from typing import Any, Dict, List, Optional
from langchain import LLMChain
from langchain.base_language import BaseLanguageModel
from langchain.callbacks.manager import Callbacks
from langchain.tools.base import BaseTool
from langchain_experimental.pydantic_v1 import BaseModel

DEMONSTRATIONS = ...
class TaskPlaningChain(LLMChain):
    """Chain to execute tasks."""
    @classmethod
    def from_llm(cls, llm: BaseLanguageModel, demos: List[Dict] = ..., verbose: bool = ...) -> LLMChain:
        """Get the response parser."""
        ...
    


class Step:
    def __init__(self, task: str, id: int, dep: List[int], args: Dict[str, str], tool: BaseTool) -> None:
        ...
    


class Plan:
    def __init__(self, steps: List[Step]) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self) -> str:
        ...
    


class BasePlanner(BaseModel):
    @abstractmethod
    def plan(self, inputs: dict, callbacks: Callbacks = ..., **kwargs: Any) -> Plan:
        """Given input, decide what to do."""
        ...
    
    @abstractmethod
    async def aplan(self, inputs: dict, callbacks: Callbacks = ..., **kwargs: Any) -> Plan:
        """Given input, decide what to do."""
        ...
    


class PlanningOutputParser(BaseModel):
    def parse(self, text: str, hf_tools: List[BaseTool]) -> Plan:
        ...
    


class TaskPlanner(BasePlanner):
    llm_chain: LLMChain
    output_parser: PlanningOutputParser
    stop: Optional[List] = ...
    def plan(self, inputs: dict, callbacks: Callbacks = ..., **kwargs: Any) -> Plan:
        """Given input, decided what to do."""
        ...
    
    async def aplan(self, inputs: dict, callbacks: Callbacks = ..., **kwargs: Any) -> Plan:
        """Given input, decided what to do."""
        ...
    


def load_chat_planner(llm: BaseLanguageModel) -> TaskPlanner:
    ...

