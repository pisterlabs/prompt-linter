# -*- coding: utf-8 -*-
"""wine_rec_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i3mjq_HCAvRaiQdznUlubpGrygqxaFOi
"""

!pip install -q openai

"""The text below is my API key and some libraries we need to import"""

import openai
openai.api_key = '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'
import pandas as pd
from openai.embeddings_utils import get_embedding, cosine_similarity

"""I made some prototype data, shown below."""

from IPython.utils import coloransi
import openai

# Set up OpenAI API
openai.api_key = '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'

# Have to tell the program what it is
messages = [
    {"role": "system", "content": "You are an intelligent assistant."}
]

# Here are the questions to ask
wine_questions = [
    "What price (roughly) are you looking for?",
    "What are you eating with it?",
    "What color (red, white, rosé) are you looking for?",
    "Do you have a preference for specific wine regions or countries?",
    "What varietal (Pinot Noir, Sauvignon Blanc, etc) are you looking for?"
]

# Collect user preferences
price = int()
food = ""
color = ""
region = ""
varietal = ""


# This iterates through each question
for i, question in enumerate(wine_questions):
    # This asks the question and then takes in the message
    message = input(f"User: {question} ")
    messages.append({"role": "user", "content": message})
    # This stores the data in a dictionary called "user_preferences"
    # This way the data is stored
    if i == 0:
      price = message
    elif i == 0:
      food = message
    elif i == 0:
      color = message
    elif i == 0:
      region = message
    else:
      varietal = message



completion1 = openai.ChatCompletion.create(
  model = "gpt-3.5-turbo",
  messages = [
  {"role": "user", "content": "I'm looking for a wine that is in a price range around {}, it does not need to be exactly that. I want it to pair well with {}, I'd really like it to be a {} wine from {}, and my preference is that it is a {}. Please show me 3 specific wine recommendations based on these preferences.".format(price, food, color, region, varietal)}
]
)
print(completion1.choices[0].message.content)

follow_up = [
    "Would you like to purchase one of these? If yes, which one (copy and paste the name)?"
]



for question in follow_up:
    # This asks the question and then takes in the message
    follow = input(f"User: {question} ")
    messages.append({"role": "user", "content": follow})
    if i == 0:
      price = message
    elif i == 0:
      food = message
    elif i == 0:
      color = message
    elif i == 0:
      region = message
    else:
      varietal = message

if (follow != "no") & (follow != "No"):
  completion2 = openai.ChatCompletion.create(
    model = "gpt-3.5-turbo",
    messages = [
        {"role": "user", "content": "Can you send me a link for the {} wine that you recommended to me previously".format(follow)}
  ]
  )
  print(completion2.choices[0].message.content)

price1 = 30
food1 = "steak"
color1 = "red"
region1 = "napa"
completion = openai.ChatCompletion.create(
  model = "gpt-3.5-turbo",
  messages = [
  {"role": "user", "content": "Recommend me three wines that cost about {}, and pairs well with {}. I want it to be a {} wine from {}.".format(price1, food1, color1, region1)}
  ]
)
print(completion.choices[0].message.content)

from IPython.utils import coloransi
import openai

# Set up OpenAI API
openai.api_key = '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'

# Have to tell the program what it is
messages = [
    {"role": "system", "content": "You are an intelligent assistant."}
]

# Here are the questions to ask
wine_questions = [
    "What price (roughly) are you looking for?",
    "What are you eating with it?",
    "What color (red, white, rosé) are you looking for?",
    "Do you have a preference for specific wine regions or countries?",
    "What varietal (Pinot Noir, Sauvignon Blanc, etc) are you looking for?"
]

# Collect user preferences
price = ""
food = ""
color = ""
region = ""
varietal = ""


# This iterates through each question
for i, question in enumerate(wine_questions):
    # This asks the question and then takes in the message
    message = input(f"User: {question} ")
    messages.append({"role": "user", "content": message})
    # This stores the data in a dictionary called "user_preferences"
    # This way the data is stored
    if i == 0:
      price == message
    elif i == 0:
      food == message
    elif i == 0:
      color == message
    elif i == 0:
      region == message
    else:
      varietal == message

print(price)

completion1 = openai.ChatCompletion.create(
  model = "gpt-3.5-turbo",
  messages = [
  {"role": "user", "content": "I'm looking for a wine that costs about {}. I am eating it with {}, I want it to be a {} wine from {}, and my preference is that it is a {}. Please show me 3 specific wine recommendations based on these preferences.".format(price, food, color, region, varietal)}
]
)

print(completion1.choices[0].message.content)
